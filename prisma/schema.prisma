// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole{
  STUDENT
  INSTRUCTOR
}


model User{
  id        String   @id @default(uuid())
  email     String   @unique
  username  String   @unique
  password  String
  role      UserRole  @default(STUDENT)
  profile   Profile?  
  courses   Course[]  @relation("InstructorCourses")
  courseEnrollments  CourseEnrollment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile{

  id        String   @id @default(uuid())
  bio       String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course{
  id             String    @id @default(uuid())
  title          String
  content        String?
  instructor     User      @relation("InstructorCourses", fields: [instructorId], references: [id])  
  instructorId   String
  duration       Int?
  period         String?
  module         Module[]
  enrollments    CourseEnrollment[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model CourseEnrollment{
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([userId, courseId]) 
}

model Module {
  id String @id @default(uuid())
  title String
  course Course @relation(fields: [courseId], references: [id])
  courseId String
  lessons Lesson[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lesson {
  id String @id @default(uuid())
  title String
  content String
  module Module @relation(fields: [moduleId], references: [id])
  moduleId String
  videoUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


